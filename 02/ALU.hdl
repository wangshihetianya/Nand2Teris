// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:

    //zx
    Mux16(a = x, b[0..15] = false, sel = zx, out = xo1);
    //nx
    Not16(in = xo1, out = nxo1);
    Mux16(a = xo1, b = nxo1, sel = nx, out = xo2);

    //zy
    Mux16(a = y, b[0..15] = false, sel = zy, out = yo1);
    //ny
    Not16(in = yo1, out = nyo1);
    Mux16(a = yo1, b = nyo1, sel = ny, out = yo2);

    //f
    And16(a = xo2, b = yo2, out = andxy);
    Add16(a = xo2, b = yo2, out = sumxy);
    Mux16(a = andxy, b = sumxy, sel = f, out = result);

    //no
    Not16(in = result, out = nresult);
    Mux16(a = result, b = nresult, sel = no, out = out, out = out1); //out1 is necessary for the subsequent use

    //zr
    //Or8Way(in = out1[0..7], out = temp1);
    //Or8Way(in = out1[8..15], out = temp2);
    //Or(a = temp1, b = temp2, out = nzr);
    Or16Way(in = out1, out = nzr);
    Not(in = nzr, out = zr);

    //ng
    //And(a = out1[15], b = true, out = ng); //It's wrong, because the processing inside the bus must take place on the internal chip.
    IsNeg(in = out1, out = ng);


}