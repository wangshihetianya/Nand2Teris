// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //Idea:
    //We have to figure out one thing before we start, which is no matter it's a A instruction or a C instruction the entire CPU logic is always runing.
    //For example, when there is a A instruction, we only focus on its impact on ARegister, but in fact the entire CPU will be affected. 
    //The truth is the ALU will also do so compute while we just ignore its output by holding the values of registers and PC. 
    //So the point of implementing CPU logic is to use the first bit of the instruction(wheter it's a A or C instruction) to select the input by using Mux or Mux16
    
    //ARegister:
    //By using Mux gate, if it's a A instruction, then whetherLoadA = false, so we can load this address, else it depends on instruction[5] of the C instruction
    Mux16(a = instruction, b = ALUOut, sel = instruction[15], out = address1);
    Mux(a = true, b = instruction[5], sel = instruction[15], out = whetherLoadA);   
    ARegister(in = address1, load = whetherLoadA, out = address2, out[0..14] = addressM);

    //ALU and DRegister:
    //Select RAM[A] or RegisterA by instruction[12] when it's a C instruction
    //Here we don't have to worry about whether it's a A instruction since the rest logic will help us ignore its impact if it's a A instruction.  
    Mux16(a = address2, b = inM, sel = instruction[12], out = ALUinput1);
    ALU(x = ALUinput2, y = ALUinput1, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUOut, out = outM, zr = zr, ng = ng);
    Mux(a = false, b = instruction[4], sel = instruction[15], out = whetherLoadD);
    DRegister(in = ALUOut, load = whetherLoadD, out = ALUinput2);

    And(a = instruction[15], b = instruction[3], out = writeM);

    //PC:
    //handle = and 
    And(a = instruction[1], b = zr, out = isEqual);
    And(a = instruction[2], b = ng, out = isNegative);
    //handle > 
    Xor(a = zr, b = ng, out = outnoGT);
    Not(in = outnoGT, out = gt);
    And(a = instruction[0], b= gt, out = isPositive);

    Or(a = isEqual, b = isNegative, out = jump1);
    Or(a = jump1, b = isPositive, out = jump2);

    //if it's a A instruction, PC++
    //else depends on jump2
    Mux(a = false, b = jump2, sel = instruction[15], out = whetherLoadPC);

    PC(in = address2, inc = true, load = whetherLoadPC, reset = reset, out[0..14] = pc);

}